Welcome to the **Note Along**! 🎶 This Django-based application allows users to explore music-related events, such as concerts and festivals, based on their favorite genres. Users can also interact with others through posts, comments, and likes, and discover musicians or connect with fellow music enthusiasts.

---

## 📖 Overview

The Note Along is a platform where:

- Users can **discover concerts and festivals** based on their music genre preferences.
- Users can **mark attendance** at events and see who else is attending.
- Users can **create posts**, share their favorite music, and interact with others through comments and likes.
- Musicians can **showcase their profiles** and interact with their audience.

### Key Technologies:

- **Django** (Version: 5.13)
- **Python** (Version: 3.12)
- **Database:** PostgreSQL with `psycopg2` as the adapter
- **Media Storage:** Cloudinary
- **Decouple:** For secure handling of sensitive information (environment variables)
- **Browsers Tested On:** Chromium-based browsers like Google Chrome and Avast Secure Browser
- **Developed On:** PyCharm Professional

---

## 🚀 Getting Started

### Prerequisites

Ensure you have the following installed:

1. Python (3.12)
2. PostgreSQL
3. Git

### Installation Steps

1. **Clone the Repository**

   ```bash
   git clone <repository-url>
   cd <repository-folder>
   ```

2. **Install Dependencies** Install all required Python packages from `requirements.txt`:

   ```bash
   pip install -r requirements.txt
   ```

3. **Configure Environment Variables**

   - A `.env.template` file is included in the repository for reference.
   - Replace placeholder values with actual credentials and save the file as `.env`.
   - A Google Doc with the required details will be provided here: https://docs.google.com/document/d/1Z3CB9aTzKArfaPrKY4y38-9WOSFmixcE7N5DTpPNd4M/edit?tab=t.0

4. **Database Setup**

   - Create a new PostgreSQL database.
   - Update your `.env` file with the database credentials.
   - Run the following commands to apply migrations:
     ```bash
     python manage.py makemigrations
     python manage.py migrate
     ```

5. **Handle Manual Migration**

   - A manual migration is included to populate the `Genre` model with 20 unique genres.
   - Migration Name: 0006_populate_genre.py
   - To apply migrations:
     ```bash
     python manage.py migrate
     ```
   - If migrations fail, remove them:
     ```bash
     python manage.py migrate accounts zero
     python manage.py makemigrations accounts
     python manage.py migrate
     ```
   - Use the `caller.py` script to populate genres as a backup.

6. **Run the Application**

   ```bash
   python manage.py runserver
   ```

   Access the application at `http://127.0.0.1:8000/`.

---

## 📂 Project Structure and Functionality

### Apps

1. **Accounts**
   - Handles user registration, login, and profile management.
   - Users can update their profiles and select music genre preferences.

- The Django User is exended with a Profile model that is linke with a 1-to-1 relationship.
- Unauthenticated users can only review the index page and the about page.
- There are 3 types of users. Superadmin, normal user and a musicians. The Superadmin can turn the User's Profile field is_musician=True in /admin/.
- A musician is automatically granted a staff custom permission group. They can enter /admin/ which has all models registered and customized, but they can edit only concerts.
- Outside of /admin/ they can create and modify their concerts as well, review other user attendance to concerts and festivals posts, create posts, like, share, comment, like comments, search or all major project models and modify their profile.
- A normal user can join concerts, but cannot create concerts and can do all the other things that the Musician can with CRUD access only to their profile and what they have created.
- There are tests set up for Accounts. 
- The user can reset their password as well with a confirmation email set up with an SMTP server.
- When a user tries to delete their user, it does not get delete - is_active gets switched to False and an asynchronous function sets a timer for 30 days. If is_active is not turned to True by the end - the user is deleted.
- Custom login logic with backends applied to handle errors and login with username or email.


2. **Events**
   - Discover concerts and festivals.
   - Mark attendance and see who else is attending.

- When a concert is created - the musician will receive a confirmation email with a asynchronous send email to their addess. 
- The conncerts can be added to Festivals only by a Superadmin in /admin/.
- Festivals can only be created and modified by Superadmins.
- There are tests set up for Events.
- Custom JS functions implemented for UX for expanding a list of concertgoers.
- Custom forms used for the App.

3. **Posts**
   - Create and interact with music-related posts.
   - Like and comment on others' posts.

- Custom JS functions implemented for UX for features like - like buttons and commenting and editing comments.
- Custom forms used for the App.

4. **Search**
   - Search for musicians, users, events, or posts using advanced filters.

### Notable Features

- **Cloudinary Integration:** Handles profile picture uploads and other media.
- **Pagination:** Provides smooth navigation through long lists of posts, users, or events, handling out of range pages.
- **Secure Handling of Sensitive Data:** Through `decouple` and `.env` file usage.

---

## 🔎 Exploring the Project

- You can start by running the 11 tests that are currently in the project - in a terminal --> `python manage.py test`
- You can start by opening the project, signing up a user and get to know the options and you can modify your personal account data;
- Then you can create a separate user - this one will be made a musician;
- You can create a Superadmin by using the command in a terminal with the project directory open - `python manage.py createsuperuser`;
- Then you can log into the app or directly into .../admin/ and you can make sure that the new User's field is_musician=True or you can make your current Superadmin into a musician;
- You can take a look at the Django Admin console only in it you can add Concerts to Festivals and create Festivals - this is the Superadmin administrative Job;
- Then you can log into the mucisian User and make a few concerts and review how other User profiles look like using the search bar for example

---

## 🛠️ Future Development

Planned features include:

- Planned features include:
- Enhanced search capabilities with more filters.
- Support for creating and managing user-organized events.
- Improvement on the overall CSS design of the project.
- Mobile-responsive design for improved usability.
- Event calendar for attendance management and review - FullCalendar.js
- User and Musician follow system with direct messaging capabilities
- A more robust media handling with enhanced posts and listings that support multiple file extensions
- Options for a deper user personal Profile page personalization

---

## 📝 Notes

- If you encounter any issues or have suggestions, feel free to reach out via GitHub or email at `stoyanharitov@gmail.com`.

Thank you for exploring the Note Along Project! 🎵

